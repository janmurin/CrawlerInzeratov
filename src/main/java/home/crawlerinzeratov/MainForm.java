/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package home.crawlerinzeratov;

import crawleri.UrychlovacInsertInzeraty;
import crawleri.NehnutelnostiCrawler;
import crawleri.BazosCrawler;
import crawleri.BazarCrawler;
import clienti.Timer;
import crawleri.RealityInzerciaCrawler;
import static home.crawlerinzeratov.MySQLDatabase.DB_URL;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Janco1
 */
public class MainForm extends javax.swing.JFrame implements PropertyChangeListener {

    ExecutorService es = Executors.newCachedThreadPool();
    private Database database = new Database();
    private MySQLDatabase mysql;
    UrychlovacInsertInzeraty urychlovacBazos = new UrychlovacInsertInzeraty(database, null);
    List<Aktualnost> aktualnosti;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    Timer timer = new Timer(System.currentTimeMillis());

    private String dbUser;
    private boolean prebiehaDownload;
    private long casPoslednehoDownloadu;
    private boolean autoDownload;
    private BazosCrawler bazos;
    private NehnutelnostiCrawler nehnutelnosti;
    private BazarCrawler bazar;
    private RealityInzerciaCrawler realityInzercia;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        //SpustacDatabazy.execute();
        initComponents();
        pockajNaDatabazu();
        aktualnosti = database.getAktualnosti();
        database.addPropertyChangeListener(this);
        refreshAktualnosti();
        timer.setStop(false);
        timer.addPropertyChangeListener(this);
        es.execute(timer);

        dbUser = Authenticator.getCurrentDBUser();
        System.out.println("current db user: " + dbUser);
        refreshButtonyOnlineOfline();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bazos24Button = new javax.swing.JButton();
        bazosDeleteButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bazosAktualnostLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        nehnutelnosti24Button = new javax.swing.JButton();
        nehnutelnostiDeleteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nehnutelnostiAktualnostLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        nehnutelnostiAllButton = new javax.swing.JButton();
        nehnutelnostiUpdateButton = new javax.swing.JButton();
        bazosAllButton = new javax.swing.JButton();
        bazosUpdateButton = new javax.swing.JButton();
        bazosLabel = new javax.swing.JLabel();
        nehnutelnostiLabel = new javax.swing.JLabel();
        odomknutToggleButton = new javax.swing.JToggleButton();
        bazarLabel = new javax.swing.JLabel();
        bazarAllButton = new javax.swing.JButton();
        bazarUpdateButton = new javax.swing.JButton();
        realityInzerciaLabel = new javax.swing.JLabel();
        realityInzerciaAllButton = new javax.swing.JButton();
        realityInzerciaUpdateButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        bazar24Button = new javax.swing.JButton();
        bazarDeleteButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        bazarAktualnostLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        realityInzercia24Button = new javax.swing.JButton();
        realityInzerciaDeleteButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        realityInzerciaAktualnostLabel = new javax.swing.JLabel();
        db2Panel = new javax.swing.JPanel();
        db2Label = new javax.swing.JLabel();
        db2StatusLabel = new javax.swing.JLabel();
        db2AKtualnostLabel = new javax.swing.JLabel();
        db2AktualnostLabel = new javax.swing.JLabel();
        db2UpdateButton = new javax.swing.JButton();
        db2DeleteButton = new javax.swing.JButton();
        db1Panel = new javax.swing.JPanel();
        db1Label = new javax.swing.JLabel();
        db1StatusLabel = new javax.swing.JLabel();
        db1AKtualnostLabel = new javax.swing.JLabel();
        db1AktualnostLabel = new javax.swing.JLabel();
        db1UpdateButton = new javax.swing.JButton();
        db1DeleteButton = new javax.swing.JButton();
        vymenitButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        startAutoDownloadButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        areality24Button = new javax.swing.JButton();
        arealityDeleteButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        arealityAktualnostLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("posli email");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bazos"));

        bazos24Button.setText("down 24");
        bazos24Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazos24ButtonActionPerformed(evt);
            }
        });

        bazosDeleteButton.setText("delete OLD");
        bazosDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazosDeleteButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Aktu·lnosù:");

        bazosAktualnostLabel.setText("00:00:00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(bazosDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bazos24Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bazosAktualnostLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(bazos24Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bazosDeleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bazosAktualnostLabel)
                .addGap(0, 38, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Nehnutelnosti"));

        nehnutelnosti24Button.setText("down 24");
        nehnutelnosti24Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nehnutelnosti24ButtonActionPerformed(evt);
            }
        });

        nehnutelnostiDeleteButton.setText("delete OLD");
        nehnutelnostiDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nehnutelnostiDeleteButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Aktu·lnosù:");

        nehnutelnostiAktualnostLabel.setText("00:00:00");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(nehnutelnostiDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nehnutelnosti24Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel2))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nehnutelnostiAktualnostLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(nehnutelnosti24Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nehnutelnostiDeleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nehnutelnostiAktualnostLabel)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Pripad nudze"));

        nehnutelnostiAllButton.setText("down all");
        nehnutelnostiAllButton.setEnabled(false);
        nehnutelnostiAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nehnutelnostiAllButtonActionPerformed(evt);
            }
        });

        nehnutelnostiUpdateButton.setText("upload DB");
        nehnutelnostiUpdateButton.setEnabled(false);
        nehnutelnostiUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nehnutelnostiUpdateButtonActionPerformed(evt);
            }
        });

        bazosAllButton.setText("down all");
        bazosAllButton.setEnabled(false);
        bazosAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazosAllButtonActionPerformed(evt);
            }
        });

        bazosUpdateButton.setText("upload DB");
        bazosUpdateButton.setEnabled(false);
        bazosUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazosUpdateButtonActionPerformed(evt);
            }
        });

        bazosLabel.setText("Bazos");
        bazosLabel.setEnabled(false);

        nehnutelnostiLabel.setText("Nehnutelnosti");
        nehnutelnostiLabel.setEnabled(false);

        odomknutToggleButton.setText("odomknut");
        odomknutToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odomknutToggleButtonActionPerformed(evt);
            }
        });

        bazarLabel.setText("Bazar");
        bazarLabel.setEnabled(false);

        bazarAllButton.setText("down all");
        bazarAllButton.setEnabled(false);
        bazarAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazarAllButtonActionPerformed(evt);
            }
        });

        bazarUpdateButton.setText("upload DB");
        bazarUpdateButton.setEnabled(false);
        bazarUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazarUpdateButtonActionPerformed(evt);
            }
        });

        realityInzerciaLabel.setText("RealityInzercia");
        realityInzerciaLabel.setEnabled(false);

        realityInzerciaAllButton.setText("down all");
        realityInzerciaAllButton.setEnabled(false);
        realityInzerciaAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realityInzerciaAllButtonActionPerformed(evt);
            }
        });

        realityInzerciaUpdateButton.setText("upload DB");
        realityInzerciaUpdateButton.setEnabled(false);
        realityInzerciaUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realityInzerciaUpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(odomknutToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bazosUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bazosAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(bazosLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(nehnutelnostiUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nehnutelnostiAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nehnutelnostiLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(bazarUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bazarAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bazarLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(realityInzerciaUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(realityInzerciaAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(realityInzerciaLabel))
                .addGap(103, 103, 103))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(realityInzerciaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(realityInzerciaAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(realityInzerciaUpdateButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bazarLabel)
                            .addComponent(nehnutelnostiLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bazarAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bazarUpdateButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(odomknutToggleButton)
                            .addComponent(bazosLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nehnutelnostiAllButton)
                            .addComponent(bazosAllButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nehnutelnostiUpdateButton)
                            .addComponent(bazosUpdateButton))))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Bazar"));

        bazar24Button.setText("down 24");
        bazar24Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazar24ButtonActionPerformed(evt);
            }
        });

        bazarDeleteButton.setText("delete OLD");
        bazarDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bazarDeleteButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Aktu·lnosù:");

        bazarAktualnostLabel.setText("00:00:00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(bazarDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bazar24Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bazarAktualnostLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(bazar24Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bazarDeleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bazarAktualnostLabel)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("RealityInzercia"));

        realityInzercia24Button.setText("down 24");
        realityInzercia24Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realityInzercia24ButtonActionPerformed(evt);
            }
        });

        realityInzerciaDeleteButton.setText("delete OLD");
        realityInzerciaDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realityInzerciaDeleteButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Aktu·lnosù:");

        realityInzerciaAktualnostLabel.setText("00:00:00");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(realityInzerciaDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(realityInzercia24Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel4))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(realityInzerciaAktualnostLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(realityInzercia24Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(realityInzerciaDeleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(realityInzerciaAktualnostLabel)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        db2Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("crawlerDB2"));

        db2Label.setText("Status:");

        db2StatusLabel.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        db2StatusLabel.setText("ONLINE");

        db2AKtualnostLabel.setText("Aktu·lnosù:");

        db2AktualnostLabel.setText("00:00:00");

        db2UpdateButton.setText("Update DB");
        db2UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db2UpdateButtonActionPerformed(evt);
            }
        });

        db2DeleteButton.setText("delete OLD");
        db2DeleteButton.setEnabled(false);
        db2DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db2DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout db2PanelLayout = new javax.swing.GroupLayout(db2Panel);
        db2Panel.setLayout(db2PanelLayout);
        db2PanelLayout.setHorizontalGroup(
            db2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(db2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(db2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(db2PanelLayout.createSequentialGroup()
                        .addGroup(db2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(db2PanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(db2Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(db2StatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                            .addGroup(db2PanelLayout.createSequentialGroup()
                                .addComponent(db2AKtualnostLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(db2AktualnostLabel)))
                        .addGap(18, 18, 18))
                    .addGroup(db2PanelLayout.createSequentialGroup()
                        .addComponent(db2UpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(db2DeleteButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        db2PanelLayout.setVerticalGroup(
            db2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(db2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(db2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(db2StatusLabel)
                    .addComponent(db2Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(db2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(db2AKtualnostLabel)
                    .addComponent(db2AktualnostLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(db2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(db2UpdateButton)
                    .addComponent(db2DeleteButton)))
        );

        db1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("crawlerDB"));

        db1Label.setText("Status:");

        db1StatusLabel.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        db1StatusLabel.setText("ONLINE");

        db1AKtualnostLabel.setText("Aktu·lnosù:");

        db1AktualnostLabel.setText("00:00:00");

        db1UpdateButton.setText("Update DB");
        db1UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db1UpdateButtonActionPerformed(evt);
            }
        });

        db1DeleteButton.setText("delete OLD");
        db1DeleteButton.setEnabled(false);
        db1DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db1DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout db1PanelLayout = new javax.swing.GroupLayout(db1Panel);
        db1Panel.setLayout(db1PanelLayout);
        db1PanelLayout.setHorizontalGroup(
            db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(db1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(db1PanelLayout.createSequentialGroup()
                        .addGroup(db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(db1AKtualnostLabel)
                            .addComponent(db1Label, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(db1StatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(db1AktualnostLabel)))
                    .addGroup(db1PanelLayout.createSequentialGroup()
                        .addComponent(db1UpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(db1DeleteButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        db1PanelLayout.setVerticalGroup(
            db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(db1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(db1Label)
                    .addComponent(db1StatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(db1AKtualnostLabel)
                    .addComponent(db1AktualnostLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(db1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(db1UpdateButton)
                    .addComponent(db1DeleteButton)))
        );

        vymenitButton.setText("Vymeniù DB");
        vymenitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vymenitButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("jLabel5");

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        startAutoDownloadButton.setText("Start auto download");
        startAutoDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAutoDownloadButtonActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Areality"));

        areality24Button.setText("down 24");
        areality24Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areality24ButtonActionPerformed(evt);
            }
        });

        arealityDeleteButton.setText("delete OLD");
        arealityDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arealityDeleteButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Aktu·lnosù:");

        arealityAktualnostLabel.setText("00:00:00");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(arealityDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(areality24Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel5))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(arealityAktualnostLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(areality24Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arealityDeleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arealityAktualnostLabel)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jButton2.setText("odfiltruj");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(201, 201, 201))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(db1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(db2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(vymenitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(startAutoDownloadButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                                    .addComponent(jButton2))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(vymenitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startAutoDownloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(statusLabel))
                    .addComponent(db2Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(db1Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bazos24ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazos24ButtonActionPerformed
        bazos = new BazosCrawler(BazosCrawler.DOWNLOAD_24, database, mysql);
        bazos.addPropertyChangeListener(this);
        es.execute(bazos);
    }//GEN-LAST:event_bazos24ButtonActionPerformed

    private void bazosDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazosDeleteButtonActionPerformed
        bazos = new BazosCrawler(BazosCrawler.DELETE_STARE_MOD, database, mysql);
        bazos.addPropertyChangeListener(this);
        es.execute(bazos);
    }//GEN-LAST:event_bazosDeleteButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void bazosUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazosUpdateButtonActionPerformed
        bazos = new BazosCrawler(BazosCrawler.UPDATE_ALL, database, mysql);
        bazos.addPropertyChangeListener(this);
        es.execute(bazos);
    }//GEN-LAST:event_bazosUpdateButtonActionPerformed

    private void bazosAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazosAllButtonActionPerformed
        bazos = new BazosCrawler(BazosCrawler.DOWNLOAD_ALL, database, mysql);
        bazos.addPropertyChangeListener(this);
        es.execute(bazos);
    }//GEN-LAST:event_bazosAllButtonActionPerformed

    private void nehnutelnosti24ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nehnutelnosti24ButtonActionPerformed
        nehnutelnosti = new NehnutelnostiCrawler(NehnutelnostiCrawler.DOWNLOAD_24, database, mysql);
        nehnutelnosti.addPropertyChangeListener(this);
        es.execute(nehnutelnosti);
    }//GEN-LAST:event_nehnutelnosti24ButtonActionPerformed

    private void nehnutelnostiAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nehnutelnostiAllButtonActionPerformed
        nehnutelnosti = new NehnutelnostiCrawler(NehnutelnostiCrawler.DOWNLOAD_ALL, database, mysql);
        nehnutelnosti.addPropertyChangeListener(this);
        es.execute(nehnutelnosti);
    }//GEN-LAST:event_nehnutelnostiAllButtonActionPerformed

    private void nehnutelnostiDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nehnutelnostiDeleteButtonActionPerformed
        nehnutelnosti = new NehnutelnostiCrawler(NehnutelnostiCrawler.DELETE_STARE_MOD, database, mysql);
        nehnutelnosti.addPropertyChangeListener(this);
        es.execute(nehnutelnosti);
    }//GEN-LAST:event_nehnutelnostiDeleteButtonActionPerformed

    private void nehnutelnostiUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nehnutelnostiUpdateButtonActionPerformed
        nehnutelnosti = new NehnutelnostiCrawler(NehnutelnostiCrawler.UPDATE_ALL, database, mysql);
        nehnutelnosti.addPropertyChangeListener(this);
        es.execute(nehnutelnosti);
    }//GEN-LAST:event_nehnutelnostiUpdateButtonActionPerformed

    private void odomknutToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odomknutToggleButtonActionPerformed
        if (odomknutToggleButton.isSelected()) {
            odomknutToggleButton.setText("ZAMKNUT");
            bazosLabel.setEnabled(true);
            bazosAllButton.setEnabled(true);
            bazosUpdateButton.setEnabled(true);
            nehnutelnostiLabel.setEnabled(true);
            nehnutelnostiAllButton.setEnabled(true);
            nehnutelnostiUpdateButton.setEnabled(true);
            bazarLabel.setEnabled(true);
            bazarAllButton.setEnabled(true);
            bazarUpdateButton.setEnabled(true);
            realityInzerciaLabel.setEnabled(true);
            realityInzerciaAllButton.setEnabled(true);
            realityInzerciaUpdateButton.setEnabled(true);
        } else {
            odomknutToggleButton.setText("odomknut");
            bazosLabel.setEnabled(false);
            bazosAllButton.setEnabled(false);
            bazosUpdateButton.setEnabled(false);
            nehnutelnostiLabel.setEnabled(false);
            nehnutelnostiAllButton.setEnabled(false);
            nehnutelnostiUpdateButton.setEnabled(false);
            bazarLabel.setEnabled(false);
            bazarAllButton.setEnabled(false);
            bazarUpdateButton.setEnabled(false);
            realityInzerciaLabel.setEnabled(false);
            realityInzerciaAllButton.setEnabled(false);
            realityInzerciaUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_odomknutToggleButtonActionPerformed

    private void bazar24ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazar24ButtonActionPerformed
        bazar = new BazarCrawler(BazarCrawler.DOWNLOAD_24, database, mysql);
        bazar.addPropertyChangeListener(this);
        es.execute(bazar);
    }//GEN-LAST:event_bazar24ButtonActionPerformed

    private void bazarDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazarDeleteButtonActionPerformed
        bazar = new BazarCrawler(BazarCrawler.DELETE_STARE_MOD, database, mysql);
        bazar.addPropertyChangeListener(this);
        es.execute(bazar);
    }//GEN-LAST:event_bazarDeleteButtonActionPerformed

    private void bazarAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazarAllButtonActionPerformed
        bazar = new BazarCrawler(BazarCrawler.DOWNLOAD_ALL, database, mysql);
        bazar.addPropertyChangeListener(this);
        es.execute(bazar);
    }//GEN-LAST:event_bazarAllButtonActionPerformed

    private void bazarUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bazarUpdateButtonActionPerformed
        bazar = new BazarCrawler(BazarCrawler.UPDATE_ALL, database, mysql);
        bazar.addPropertyChangeListener(this);
        es.execute(bazar);
    }//GEN-LAST:event_bazarUpdateButtonActionPerformed

    private void realityInzercia24ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realityInzercia24ButtonActionPerformed
        realityInzercia = new RealityInzerciaCrawler(RealityInzerciaCrawler.DOWNLOAD_24, database, mysql);
        realityInzercia.addPropertyChangeListener(this);
        es.execute(realityInzercia);
    }//GEN-LAST:event_realityInzercia24ButtonActionPerformed

    private void realityInzerciaDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realityInzerciaDeleteButtonActionPerformed
        realityInzercia = new RealityInzerciaCrawler(RealityInzerciaCrawler.DELETE_STARE_MOD, database, mysql);
        realityInzercia.addPropertyChangeListener(this);
        es.execute(realityInzercia);
    }//GEN-LAST:event_realityInzerciaDeleteButtonActionPerformed

    private void realityInzerciaAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realityInzerciaAllButtonActionPerformed
        realityInzercia = new RealityInzerciaCrawler(RealityInzerciaCrawler.DOWNLOAD_ALL, database, mysql);
        realityInzercia.addPropertyChangeListener(this);
        es.execute(realityInzercia);
    }//GEN-LAST:event_realityInzerciaAllButtonActionPerformed

    private void realityInzerciaUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realityInzerciaUpdateButtonActionPerformed
        realityInzercia = new RealityInzerciaCrawler(RealityInzerciaCrawler.UPDATE_ALL, database, mysql);
        realityInzercia.addPropertyChangeListener(this);
        es.execute(realityInzercia);
    }//GEN-LAST:event_realityInzerciaUpdateButtonActionPerformed

    private void vymenitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vymenitButtonActionPerformed
        if (dbUser.equals(db1_user)) {
            dbUser = db2_user;
            Authenticator.setCurrentUser(db2_url, db2_user, db2_pass);
        } else {
            dbUser = db1_user;
            Authenticator.setCurrentUser(db1_url, db1_user, db1_pass);
        }

        refreshButtonyOnlineOfline();
    }//GEN-LAST:event_vymenitButtonActionPerformed

    private void refreshButtonyOnlineOfline() {
        if (dbUser.equals(db1_user)) {
            // online je prva databaza, neprebiehaju modifikacie
            mysql = new MySQLDatabase(db2_url, db2_user, db2_pass);
            db1StatusLabel.setForeground(Color.GREEN);
            db1StatusLabel.setText("ONLINE");
            db2StatusLabel.setForeground(Color.red);
            db2StatusLabel.setText("OFFLINE");
            db1Panel.setEnabled(false);
            db1Label.setEnabled(false);
            //db1DeleteButton.setEnabled(false);
            db1UpdateButton.setEnabled(false);
            db1AKtualnostLabel.setEnabled(false);
            db1AktualnostLabel.setEnabled(false);

            db2Panel.setEnabled(true);
            db2Label.setEnabled(true);
            //db2DeleteButton.setEnabled(true);
            db2UpdateButton.setEnabled(true);
            db2AKtualnostLabel.setEnabled(true);
            db2AktualnostLabel.setEnabled(true);
        } else {
            // online je druha databaza, neprebiehaju modifikacie
            mysql = new MySQLDatabase(db1_url, db1_user, db1_pass);
            db2StatusLabel.setForeground(Color.GREEN);
            db2StatusLabel.setText("ONLINE");
            db1StatusLabel.setForeground(Color.red);
            db1StatusLabel.setText("OFFLINE");
            db1Panel.setEnabled(true);
            db1Label.setEnabled(true);
            //db1DeleteButton.setEnabled(true);
            db1UpdateButton.setEnabled(true);
            db1AKtualnostLabel.setEnabled(true);
            db1AktualnostLabel.setEnabled(true);

            db2Panel.setEnabled(false);
            db2Label.setEnabled(false);
            //db2DeleteButton.setEnabled(false);
            db2UpdateButton.setEnabled(false);
            db2AKtualnostLabel.setEnabled(false);
            db2AktualnostLabel.setEnabled(false);
        }
    }

    private void db1UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db1UpdateButtonActionPerformed
        System.out.println("zacinam filtraciu inzeratov");
        database.aplikujFiltraciuInzeratov();

        zapisDoLogu("INIT update server DB");
        long start = System.currentTimeMillis();

//        // TERAZ AUTOMATICKY UPDATNUT VZDIALENU DATABAZU O NOVE INZERATY
//        zapisDoLogu("updating remote server db");
//        pockajNaMysqlDatabazu();
//        Inzerat lastTimeInserted = mysql.getLastTimeInzeratInserted();
//        pockajNaDatabazu();
//        // v remote_inzeraty si najdeme tie ktore su bazos sukromne a boli pridane len nedavno
//        //List<Inzerat> noveInzeraty = database.getRemoteInzeratyListGreaterThanLastTimeInserted(lastTimeInserted.getTimeInserted());
//        List<Inzerat> noveInzeraty = database.getOdfiltrovaneInzeratyListGreaterThanLastTimeInserted(lastTimeInserted.getTimeInserted());
//        if (noveInzeraty != null && noveInzeraty.size() == 0) {
//            zapisDoLogu("ziadne nove inzeraty nenajdene");
//            //return;
//        } else {
//            zapisDoLogu("nasli sa nove inzeraty");
//            long startTime2 = System.currentTimeMillis();
//            List<Inzerat> toserver = new ArrayList<Inzerat>();
//            zapisDoLogu("posielam do vzdialenej databazy " + noveInzeraty.size() + " inzeratov");
//            for (int i = 0; i < noveInzeraty.size(); i++) {
//                if (toserver.size() < 10000) {
//                    toserver.add(noveInzeraty.get(i));
//                } else {
//                    pockajNaMysqlDatabazu();
//                    mysql.inzertInzeraty(toserver);
//                    zapisDoLogu("insertnutych " + i + "/" + noveInzeraty.size() + " ");
//                    System.out.println(getETAtime(startTime2, i, noveInzeraty.size()));
//                    toserver = new ArrayList<Inzerat>();
//                }
//            }
//            pockajNaMysqlDatabazu();
//            mysql.inzertInzeraty(toserver);
//        }
        // vylepseny update: vymazeme zo vzdialenej vsetko co nema id a zaroven link tak ako v odfiltrovanych
        // potom mozeme posielat idcka ktore nie su v mysql
        Map<Integer, String> aktualneLinky = null;
        //System.out.println(" zÌskavam inform·cie o aktu·lnych inzer·toch...");
        zapisDoLogu(" zÌskavam inform·cie o aktu·lnych inzer·toch...");
        try {
            pockajNaMysqlDatabazu();
            aktualneLinky = mysql.getInzeratyIDLinks();
        } catch (Exception e) {
            zapisDoLogu("Vyskytla sa chyba. Skontrolujte vaöe pripojenie k internetu.");
            //System.out.println("Vyskytla sa chyba. Skontrolujte vaöe pripojenie k internetu.");
            return;
        }
        zapisDoLogu("aktualnych mysql linkov: " + aktualneLinky.size());
        //System.out.println("aktualnych mysql linkov: " + aktualneLinky.size());
        // MUSIME ZABEZPECIT ABY V mysql BOLI IBA TIE INZERATY, KTORE MAJU ZAROVEN ROVNAKE ID AJ AKTUALNY LINK AKO V local db
        // vsetko ostatne sa maze
        pockajNaDatabazu();
        List<Inzerat> odfiltrovaneInzeraty = database.getOdfiltrovaneInzeratyList();
        zapisDoLogu("odfiltrovanych: " + odfiltrovaneInzeraty.size());
        //System.out.println("odfiltrovanych: " + vsetkyInzeraty.size());
        List<Integer> toDeleteIDs = new ArrayList<Integer>();
        List<Inzerat> toInsertInzeraty = new ArrayList<Inzerat>();
        for (Inzerat inz : odfiltrovaneInzeraty) {
            // chcem zistit ci aktualny inzerat je aktualny alebo uz nie
            if (aktualneLinky.containsKey(inz.getId())) {
                if (aktualneLinky.get(inz.getId()).equals(inz.getAktualny_link())) {
                    // id aj link pre konkretny inzerat su zhodne s mysql, takze sa nemaze a ani nepridava
                } else {
                    // pre konkretny mysql inzerat sa nezhoduje id a link s tym co je v local db takze ide von z mysql
                    toDeleteIDs.add(inz.getId());
                    toInsertInzeraty.add(inz);
                }
            } else {
                // nasli sme inzerat ktoreho idcko nie je v mysql, teda zbytocne take idcko mazat
                //toDeleteIDs.add(inz.getId());
                toInsertInzeraty.add(inz);
            }
        }
        // este treba zistit ktore inzeraty su v mysql a nie su v local
        for (Integer id:aktualneLinky.keySet()){
            boolean jeVLocalDB=false;
            for (Inzerat inz:odfiltrovaneInzeraty){
                if (inz.getId()==id){
                    jeVLocalDB=true;
                    break;
                }
            }
            if (!jeVLocalDB){
                toDeleteIDs.add(id);
            }
        }
        zapisDoLogu("z mysql maûem " + toDeleteIDs.size() + " neaktu·lnych inzer·tov...");
        //System.out.println("z mysql maûem " + toDeleteIDs.size() + " neaktu·lnych inzer·tov...");
        zapisDoLogu("do mysql posielam " + toInsertInzeraty.size() + " novych inzer·tov...");
        //System.out.println("do mysql posielam " + toInsertInzeraty.size() + " novych inzer·tov...");
        pockajNaMysqlDatabazu();
        mysql.deleteInzeratyWhereID(toDeleteIDs);
        if (toInsertInzeraty != null && toInsertInzeraty.size() == 0) {
            zapisDoLogu("ziadne nove inzeraty nenajdene");
            //return;
        } else {
            zapisDoLogu("nasli sa nove inzeraty");
            long startTime2 = System.currentTimeMillis();
            List<Inzerat> toserver = new ArrayList<Inzerat>();
            zapisDoLogu("posielam do vzdialenej databazy " + toInsertInzeraty.size() + " inzeratov");
            for (int i = 0; i < toInsertInzeraty.size(); i++) {
                if (toserver.size() < 10000) {
                    toserver.add(toInsertInzeraty.get(i));
                } else {
                    pockajNaMysqlDatabazu();
                    mysql.inzertInzeraty(toserver);
                    zapisDoLogu("insertnutych " + i + "/" + toInsertInzeraty.size() + " ");
                    System.out.println(getETAtime(startTime2, i, toInsertInzeraty.size()));
                    toserver = new ArrayList<Inzerat>();
                }
            }
            pockajNaMysqlDatabazu();
            mysql.inzertInzeraty(toserver);
        }

        // moze sa stat ze niektore inzeraty tam nedosli
        // spytame sa ktore tam dosli a znova posielame tie co nedosli
        zapisDoLogu("kontrola ci su vsetky tam");
        boolean vsetkyDosli = false;
        List<Inzerat> toserver;
        while (!vsetkyDosli) {
            // vypytame si idcka vsetkych inzeratov z aktualneho portalu
            // vypiseme z lokalnej databazy vsetky inzeraty z aktualneho portalu, ktore nemaju idcka na serveri
            pockajNaMysqlDatabazu();
            List<Integer> idckaPortal = mysql.getInzeratyIDs();
            pockajNaDatabazu();
            // List<Inzerat> chybneInzeraty = database.getRemoteInzeratyWhereIDNotIN(idckaPortal);
            List<Inzerat> chybneInzeraty = database.getOdfiltrovaneInzeratyWhereIDNotIN(idckaPortal);
            if (chybneInzeraty.size() == 0) {
                //System.out.println("vsetky inzeraty dosli");
                break;
            }
            zapisDoLogu("nedoslo " + chybneInzeraty.size() + ", posielam znova");
            toserver = new ArrayList<Inzerat>();
            long startTime2 = System.currentTimeMillis();
            for (int i = 0; i < chybneInzeraty.size(); i++) {
                if (toserver.size() < 10000) {
                    toserver.add(chybneInzeraty.get(i));
                } else {
                    zapisDoLogu("posielam do vzdialenej databazy " + toserver.size() + " inzeratov");
                    pockajNaMysqlDatabazu();
                    mysql.inzertInzeraty(toserver);
                    zapisDoLogu("insertnutych " + i + "/" + chybneInzeraty.size() + " ");
                    System.out.println(getETAtime(startTime2, i, chybneInzeraty.size()));
                    toserver = new ArrayList<Inzerat>();
                }
            }
            pockajNaMysqlDatabazu();
            mysql.inzertInzeraty(toserver);
            pockajNaMysqlDatabazu();
            idckaPortal = mysql.getInzeratyIDs();
            pockajNaDatabazu();
            //if (idckaPortal.size() == database.getRemoteCountPortal()) {
            if (idckaPortal.size() == database.getOdfiltrovaneCountPortal()) {
                vsetkyDosli = true;
            }
        }
        zapisDoLogu("vsetky inzeraty dosli");
        zapisDoLogu("aktualizujemn informaciu o poslednom updatnuti DB");
        pockajNaDatabazu();
        if (dbUser.equals(db1_user)) {
            // online je prva databaza, teda sme updatli druhu DB
            database.updateAktualnost(db2_user);
        } else {
            database.updateAktualnost(db1_user);
        }
        System.out.println("aktualnostiUpdated propertyChange");
        pockajNaDatabazu();
        aktualnosti = database.getAktualnosti();
        refreshAktualnosti();
        zapisDoLogu("update ukonceny: " + getElapsedTime(start));
        System.out.println("aktualnosti aktualnostiUpdated from DB");
    }//GEN-LAST:event_db1UpdateButtonActionPerformed

    private void db2UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db2UpdateButtonActionPerformed
        db1UpdateButtonActionPerformed(evt);
    }//GEN-LAST:event_db2UpdateButtonActionPerformed

    private void db1DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db1DeleteButtonActionPerformed
// MAZANIE SA DEJE PRI UPDATE

//        long start = System.currentTimeMillis();
//        System.out.println("zacinam filtraciu inzeratov");
//        database.aplikujFiltraciuInzeratov();
//        System.out.println("mazem z mysql DB neplatne inzeraty");
//        pockajNaDatabazu();
//        //List<String> platne = database.getRemoteLinky();
//        List<String> platne = database.getOdfiltrovaneLinky();
//        pockajNaMysqlDatabazu();
//        int vymazanycht = mysql.deleteInzeratyWhereLinkNOTIn(platne);
//        System.out.println("z remote DB vymazanych " + vymazanycht + " neplatnych inzeratov" + getElapsedTime(start));
    }//GEN-LAST:event_db1DeleteButtonActionPerformed

    private void db2DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db2DeleteButtonActionPerformed
        db1DeleteButtonActionPerformed(evt);
    }//GEN-LAST:event_db2DeleteButtonActionPerformed

    private void startAutoDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAutoDownloadButtonActionPerformed
        if (!autoDownload) {
            autoDownload = true;
            startAutoDownloadButton.setText("STOP auto download");
        } else {
            autoDownload = false;
            startAutoDownloadButton.setText("START auto download");
            prebiehaDownload = false;
        }

    }//GEN-LAST:event_startAutoDownloadButtonActionPerformed

    private void areality24ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areality24ButtonActionPerformed
//        areality = new ArealityCrawler(RealityInzerciaCrawler.DOWNLOAD_24, database, mysql);
//        realityInzercia.addPropertyChangeListener(this);
//        es.execute(realityInzercia);
    }//GEN-LAST:event_areality24ButtonActionPerformed

    private void arealityDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arealityDeleteButtonActionPerformed
//        realityInzercia = new RealityInzerciaCrawler(RealityInzerciaCrawler.DELETE_STARE_MOD, database, mysql);
//        realityInzercia.addPropertyChangeListener(this);
//        es.execute(realityInzercia);
    }//GEN-LAST:event_arealityDeleteButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        database.aplikujFiltraciuInzeratov();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton areality24Button;
    private javax.swing.JLabel arealityAktualnostLabel;
    private javax.swing.JButton arealityDeleteButton;
    private javax.swing.JButton bazar24Button;
    private javax.swing.JLabel bazarAktualnostLabel;
    private javax.swing.JButton bazarAllButton;
    private javax.swing.JButton bazarDeleteButton;
    private javax.swing.JLabel bazarLabel;
    private javax.swing.JButton bazarUpdateButton;
    private javax.swing.JButton bazos24Button;
    private javax.swing.JLabel bazosAktualnostLabel;
    private javax.swing.JButton bazosAllButton;
    private javax.swing.JButton bazosDeleteButton;
    private javax.swing.JLabel bazosLabel;
    private javax.swing.JButton bazosUpdateButton;
    private javax.swing.JLabel db1AKtualnostLabel;
    private javax.swing.JLabel db1AktualnostLabel;
    private javax.swing.JButton db1DeleteButton;
    private javax.swing.JLabel db1Label;
    private javax.swing.JPanel db1Panel;
    private javax.swing.JLabel db1StatusLabel;
    private javax.swing.JButton db1UpdateButton;
    private javax.swing.JLabel db2AKtualnostLabel;
    private javax.swing.JLabel db2AktualnostLabel;
    private javax.swing.JButton db2DeleteButton;
    private javax.swing.JLabel db2Label;
    private javax.swing.JPanel db2Panel;
    private javax.swing.JLabel db2StatusLabel;
    private javax.swing.JButton db2UpdateButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton nehnutelnosti24Button;
    private javax.swing.JLabel nehnutelnostiAktualnostLabel;
    private javax.swing.JButton nehnutelnostiAllButton;
    private javax.swing.JButton nehnutelnostiDeleteButton;
    private javax.swing.JLabel nehnutelnostiLabel;
    private javax.swing.JButton nehnutelnostiUpdateButton;
    private javax.swing.JToggleButton odomknutToggleButton;
    private javax.swing.JButton realityInzercia24Button;
    private javax.swing.JLabel realityInzerciaAktualnostLabel;
    private javax.swing.JButton realityInzerciaAllButton;
    private javax.swing.JButton realityInzerciaDeleteButton;
    private javax.swing.JLabel realityInzerciaLabel;
    private javax.swing.JButton realityInzerciaUpdateButton;
    private javax.swing.JButton startAutoDownloadButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton vymenitButton;
    // End of variables declaration//GEN-END:variables

    public void propertyChange(PropertyChangeEvent evt) {
        if ("aktualnostiUpdated".equals(evt.getPropertyName())) {
            System.out.println("aktualnostiUpdated propertyChange");
            pockajNaDatabazu();
            aktualnosti = database.getAktualnosti();
            refreshAktualnosti();
            System.out.println("aktualnosti aktualnostiUpdated from DB");
        }
        if ("secondAdded".equals(evt.getPropertyName())) {
            refreshAktualnosti();
            if (!prebiehaDownload) {
                if (System.currentTimeMillis() - casPoslednehoDownloadu > 900000 && !prebiehaDownload && autoDownload) {
                    // ubehlo 15 minut, spustam aktualizaciu
                    System.out.println("property change spustam download");
                    prebiehaDownload = true;
                    casPoslednehoDownloadu = System.currentTimeMillis();
                    statusLabel.setText("prebieha download");
                    // spustime sekvenciu bazosom
                    bazos24ButtonActionPerformed(null);
                } else {
                    if (autoDownload) {
                        statusLabel.setText(" Najblizsi download: " + getETAtime(casPoslednehoDownloadu, (int) (System.currentTimeMillis() - casPoslednehoDownloadu), 900000));
                    } else {
                        statusLabel.setText("auto download vypnuty");
                    }
                }
            }
        }
        if ("logHlaska".equals(evt.getPropertyName())) {
            logTextArea.append((String) evt.getNewValue() + "\n");
            logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
        }
        if ("bazos24ended".equals(evt.getPropertyName())) {
            logTextArea.append((String) evt.getNewValue() + "\n");
            logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
            bazos.removePropertyChangeListener(this);
            bazos = null;
            // bazos skonceny pokracujeme nehnutelnostami
            if (autoDownload) {
                nehnutelnosti24ButtonActionPerformed(null);
            }
        }
        if ("nehnutelnosti24ended".equals(evt.getPropertyName())) {
            logTextArea.append((String) evt.getNewValue() + "\n");
            logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
            nehnutelnosti.removePropertyChangeListener(this);
            nehnutelnosti = null;
            // nehnutelnsoti skonceny pokracujeme bazarom
            if (autoDownload) {
                bazar24ButtonActionPerformed(null);
            }
        }
        if ("bazar24ended".equals(evt.getPropertyName())) {
            logTextArea.append((String) evt.getNewValue() + "\n");
            logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
            bazar.removePropertyChangeListener(this);
            bazar = null;
            // bazar skonceny pokracujeme reality inzercia
            if (autoDownload) {
                realityInzercia24ButtonActionPerformed(null);
            }
        }
        if ("realityInzeraty24ended".equals(evt.getPropertyName())) {
            logTextArea.append((String) evt.getNewValue() + "\n");
            logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
            realityInzercia.removePropertyChangeListener(this);
            realityInzercia = null;
            if (autoDownload) {
                // realityInzeraty skoncili pokracujeme s updatom
                if (db1UpdateButton.isEnabled()) {
                    db1UpdateButtonActionPerformed(null);
                } else {
                    db2UpdateButtonActionPerformed(null);
                }
                prebiehaDownload = false;
                if (db1Panel.isEnabled()) {
                    logTextArea.append("databaza crawlerDB updatnuta, prepinam ju na ONLINE rezim\n");
                    logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
                    vymenitButtonActionPerformed(null);
                } else {
                    logTextArea.append("databaza crawlerDB2 updatnuta, prepinam ju na ONLINE rezim\n");
                    logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
                    vymenitButtonActionPerformed(null);
                }
            }
        }
        if ("VYNIMKA".equals(evt.getPropertyName())) {
            if (autoDownload) {
                // PRAVDEPODOBNE SME OFFLINE
//                if (db1UpdateButton.isEnabled()) {
//                    db1UpdateButtonActionPerformed(null);
//                } else {
//                    db2UpdateButtonActionPerformed(null);
//                }
                prebiehaDownload = false;
//                if (db1Panel.isEnabled()) {
//                    logTextArea.append("databaza crawlerDB updatnuta, prepinam ju na ONLINE rezim\n");
//                    logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
//                    vymenitButtonActionPerformed(null);
//                } else {
//                    logTextArea.append("databaza crawlerDB2 updatnuta, prepinam ju na ONLINE rezim\n");
//                    logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
//                    vymenitButtonActionPerformed(null);
//                }
            }
        }
    }

    private void pockajNaDatabazu() {
        while (!database.mamDatabazu()) {
            try {
                System.out.println("cakam na Databazu");
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(BazosCrawler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

//    private boolean jeInzeratVStrome(Node aktualny, String nazov) {
//        if (nazov.length() == 0) {
//            return true;
//        }
//        // pozriet jeho deti, ked nema dieta vytvorit novu vetvu, ked ma tak return 
//        for (Node dieta : aktualny.potomkovia) {
//            if (dieta.hodnota.equalsIgnoreCase(nazov.charAt(0) + "")) {
//                return jeInzeratVStrome(dieta, nazov.substring(1));
//            }
//        }
//
//        // pridame novu vetvu
//        while (nazov.length() > 0) {
//            Node novy = new Node(nazov.charAt(0) + "");
//            nazov = nazov.substring(1);
//            aktualny.potomkovia.add(novy);
//            aktualny = novy;
//        }
//
//        return false;
//    }
    public String getElapsedTime(long startTime) {
        double elapsedTime = ((System.currentTimeMillis() - startTime) / 1000.0);
        int hodinE = (int) ((elapsedTime) / (3600));
        int minutE = (int) ((elapsedTime) / (60));
        int sekundE = (int) ((elapsedTime));
        sekundE %= 60;
        minutE %= 60;
        String hodinStringE = "" + hodinE;
        if (hodinE < 10) {
            hodinStringE = "0" + hodinE;
        }
        String minutStringE = "" + minutE;
        if (minutE < 10) {
            minutStringE = "0" + minutE;
        }
        String sekundStringE = "" + sekundE;
        if (sekundE < 10) {
            sekundStringE = "0" + sekundE;
        }
        //System.out.println("ETA:" + (hodinStringE + ":" + minutStringE + ":" + sekundStringE));
        return (hodinStringE + ":" + minutStringE + ":" + sekundStringE);
    }

    private void refreshAktualnosti() {
        for (Aktualnost akt : aktualnosti) {
            try {
                long start = sdf.parse(akt.datum).getTime();
                if (akt.portal.equals("http://www.nehnutelnosti.sk")) {
                    nehnutelnostiAktualnostLabel.setText(getElapsedTime(start));
                }
                if (akt.portal.equals("http://reality.bazos.sk")) {
                    bazosAktualnostLabel.setText(getElapsedTime(start));
                }
                if (akt.portal.equals("http://reality.bazar.sk")) {
                    bazarAktualnostLabel.setText(getElapsedTime(start));
                }
                if (akt.portal.equals("http://reality.inzercia.sk")) {
                    realityInzerciaAktualnostLabel.setText(getElapsedTime(start));
                }
                if (akt.portal.equals("crawlerDBuser")) {
                    db1AktualnostLabel.setText(getElapsedTime(start));
                }
                if (akt.portal.equals("dbuser2")) {
                    db2AktualnostLabel.setText(getElapsedTime(start));
                }
                if (akt.portal.equals("http://areality.sk")) {
                    arealityAktualnostLabel.setText(getElapsedTime(start));
                }
            } catch (ParseException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void pockajNaMysqlDatabazu() {
        while (!mysql.mamDatabazu()) {
            try {
                System.out.println("cakam na Mysql Databazu");
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(BazosCrawler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private String getETAtime(long startTime, int pocetInzeratov, int vsetkych) {
        double rychlost = ((System.currentTimeMillis() - startTime) / 1000.0) / pocetInzeratov;
        double etaTime = (vsetkych - pocetInzeratov) * rychlost;
        int hodinE = (int) ((etaTime) / (3600));
        int minutE = (int) ((etaTime) / (60));
        int sekundE = (int) ((etaTime));
        sekundE %= 60;
        minutE %= 60;
        String hodinStringE = "" + hodinE;
        if (hodinE < 10) {
            hodinStringE = "0" + hodinE;
        }
        String minutStringE = "" + minutE;
        if (minutE < 10) {
            minutStringE = "0" + minutE;
        }
        String sekundStringE = "" + sekundE;
        if (sekundE < 10) {
            sekundStringE = "0" + sekundE;
        }
        //System.out.println("ETA:" + (hodinStringE + ":" + minutStringE + ":" + sekundStringE));
        return (hodinStringE + ":" + minutStringE + ":" + sekundStringE);
//            System.out.println("etaTime: "+etaTime);
//            System.out.println("rychlost: "+rychlost);
    }

    private void zapisDoLogu(String text) {
        System.out.println(text);
        logTextArea.append(text + "\n");
        logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
    }

}
